// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q  &kp W  &kp F  &kp P                 &kp B        &kp J                 &kp L  &kp U      &kp Y    &kp BSPC
&kp A  &kp R  &kp S  &kp T                 &kp G        &kp M                 &kp N  &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D                 &kp V        &kp K                 &kp H  &kp COMMA  &kp DOT  &kp FSLH
                     &mt LEFT_CONTROL ESC  &kp ENTER    &mt LEFT_SHIFT SPACE  &to 1
            >;
        };

        punctuation {
            bindings = <
&kp Q      &kp AT_SIGN     &kp HASH   &kp DOLLAR  &kp PERCENT        &kp CARET  &kp AMPS         &kp ASTERISK           &kp PLUS           &kp BACKSPACE
&kp TAB    &kp EQUAL       &kp SQT    &kp DQT     &kp EXCLAMATION    &kp BSLH   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp LEFT_BRACKET   &kp SEMICOLON
&kp TILDE  &kp UNDERSCORE  &kp MINUS  &kp COLON   &kp GRAVE          &kp PIPE   &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp FSLH
                                      &to 0       &trans             &trans     &to 2
            >;
        };

        functional {
            bindings = <
&trans   &trans  &trans      &trans      &trans              &trans               &trans          &kp C_VOL_DN  &kp C_VOLUME_UP      &kp C_MUTE
&kp TAB  &to 5   &trans      &trans      &trans              &mt HOME LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &mt END RIGHT_ARROW  &kp LG(EQUAL)
&to 3    &to 6   &kp C_PREV  &kp C_NEXT  &kp C_PLAY_PAUSE    &kp LS(LC(TAB))      &kp LS(TAB)     &kp TAB       &kp LC(TAB)          &kp LG(MINUS)
                             &to 0       &trans              &trans               &to 4
            >;
        };

        bluetooth {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };

        numbers {
            bindings = <
&none   &none   &none                  &none            &kp PLUS        &kp MINUS    &none             &none             &none       &none
&kp N1  &kp N2  &ht LEFT_ALT NUMBER_3  &ht LEFT_GUI N4  &kp EQUAL       &kp PERCENT  &ht RIGHT_GUI N6  &ht RIGHT_ALT N7  &kp N8      &kp N9
&none   &none   &none                  &kp N5           &kp ASTERISK    &kp SLASH    &kp N0            &kp COMMA         &kp PERIOD  &none
                                       &to 0            &none           &none        &to 1
            >;
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans  &trans   &trans   &trans   &trans
&kp F1  &kp F2  &kp F3  &kp F4  &trans    &trans  &kp F6   &kp F7   &kp F8   &kp F9
&trans  &trans  &trans  &kp F5  &trans    &trans  &kp F10  &kp F11  &kp F12  &trans
                        &trans  &trans    &trans  &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans      &trans          &trans          &trans        &trans           &trans
&trans  &trans  &trans  &trans  &trans      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans      &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                        &to 0   &mkp MB1    &mkp MB2        &mkp MCLK
            >;
        };
    };
};
